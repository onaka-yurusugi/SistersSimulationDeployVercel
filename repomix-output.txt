This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-16T08:03:48.901Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/globals.css
src/app/layout.tsx
src/app/lib/api.ts
src/app/page.tsx
src/app/types/character.ts
src/app/types/game.ts
src/components/GameContainer.tsx
src/hooks/useCharacterSelect.ts
src/hooks/useGameState.ts
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "sss-vercel",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@vercel/analytics": "^1.5.0",
    "lucide-react": "^0.475.0",
    "next": "15.1.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.7",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
    --background: #f0f4f8;
    --foreground: #171717;
    --primary: #3490dc;
    --primary-hover: #2779bd;
    --secondary: #38c172;
    --secondary-hover: #2d995b;
    --accent: #f6993f;
    --accent-hover: #de751f;
}

@layer components {
    .option-button {
        @apply text-lg px-4 py-2 bg-primary text-white rounded-md cursor-pointer transition-colors;
    }

    .option-button:hover:not(:disabled) {
        @apply font-bold bg-pink-300 text-gray-800;
    }

    .option-button:disabled {
        @apply opacity-50 cursor-not-allowed;
    }

    .option-button.selected {
        @apply font-bold bg-pink-200 border-2 border-pink-400 text-gray-800;
    }
}

body {
    @apply bg-background text-foreground;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from "next";
import { GeistSans } from "geist/font/sans";
import { Analytics } from "@vercel/analytics/react";
import "./globals.css";

export const metadata: Metadata = {
  title: "妹萌え萌えコミュニケーションゲーム",
  description: "Interactive communication game with your sister character",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja">
      <body className={`${GeistSans.className} antialiased`}>
        {children}
        <Analytics />
      </body>
    </html>
  );
}

================
File: src/app/lib/api.ts
================
// src/lib/api.ts
import { EvaluationResult } from "@/types/game";
import { PersonalityType } from "@/types/character";

const API_KEY = process.env.NEXT_PUBLIC_DIFY_API_KEY;
const API_URL = "https://api.dify.ai/v1/workflows/run";

interface ApiResponse {
    data: {
        outputs: {
            result: string;
        };
    };
}

const errorResult: EvaluationResult = {
    評価: 0,
    反応: "＜エラー＞APIリクエストに失敗しました。",
    心の声: "早くお兄ちゃんと話したいなあ。",
};

export async function evaluateMessage(
    message: string,
    personality: PersonalityType | string,
    affectionScore: number,
    customPrompt?: string
): Promise<EvaluationResult> {
    if (!API_KEY) {
        console.error("API key is not set");
        return errorResult;
    }

    const data = {
        inputs: {
            message,
            personality,
            affectionScore: affectionScore + 1,
            ...(customPrompt ? { customPrompt } : {}),
        },
        response_mode: "blocking",
        user: "user-" + Math.random().toString(36).substr(2, 9),
    };

    try {
        const response = await fetch(API_URL, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${API_KEY}`,
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const resultData = (await response.json()) as ApiResponse;
        const result = resultData.data.outputs.result.trim();

        try {
            return JSON.parse(result) as EvaluationResult;
        } catch {
            return {
                評価: 10,
                反応: result,
                心の声: "テキスト応答を受け取りました。",
            };
        }
    } catch (error) {
        console.error("API Error:", error);
        return errorResult;
    }
}

================
File: src/app/page.tsx
================
'use client';

import { useCharacterSelect } from '@/hooks/useCharacterSelect';
import GameContainer from '@/components/GameContainer';
import CharacterSelectModal from '@/components/Modal/CharacterSelectModal';

export default function Home() {
  const {
    showModal,
    selectedPersonality,
    customCharacter,
    handleCharacterSelect,
    setShowModal
  } = useCharacterSelect();

  return (
    <div className="min-h-screen bg-background p-4 sm:p-8">
      <div className="max-w-2xl mx-auto">
        <h1 className="text-2xl font-bold text-center mb-8">
          妹萌え萌えコミュニケーションゲーム
        </h1>

        <GameContainer
          initialPersonality={selectedPersonality}
          customCharacter={customCharacter}
        />

        {showModal && (
          <CharacterSelectModal
            onSelect={handleCharacterSelect}
            onClose={() => setShowModal(false)}
          />
        )}
      </div>
    </div>
  );
}

================
File: src/app/types/character.ts
================
export type PersonalityType =
    | "ツンデレ妹"
    | "クーデレ妹"
    | "デレデレ妹"
    | "ヤンデレ妹"
    | "活発妹"
    | "ダウナー妹"
    | "おっとり妹"
    | "ミステリアス妹"
    | "社交的妹"
    | "クリエイティブ妹"
    | "委員長妹"
    | "夢見がち妹"
    | "その他";

export interface Character {
    characterImage: string;
    characterName: string;
    producerText: string;
}

export interface CustomCharacter {
    name: string;
    description: string;
    image: string;
}

================
File: src/app/types/game.ts
================
export interface GameState {
    isLocked: boolean;
    affectionTotal: number;
    personality: PersonalityType | string;
    isFreeTextMode: boolean;
}

export interface EvaluationResult {
    評価: number;
    反応: string;
    心の声: string;
}

export interface GameProps {
    initialPersonality?: PersonalityType;
}

================
File: src/components/GameContainer.tsx
================
// src/components/GameContainer.tsx
'use client';

import { useState, useEffect } from 'react';
import { GameProps, GameState, EvaluationResult } from '@/types/game';
import CharacterWindow from './CharacterWindow';
import OptionsContainer from './OptionsContainer';
import ResultContainer from './ResultContainer';
import { evaluateMessage } from '@/lib/api';
import { useGameState } from '@/hooks/useGameState';

export default function GameContainer({ initialPersonality }: GameProps) {
  const {
    state,
    setState,
    handleSelection,
    handleFreeText,
    toggleMode
  } = useGameState(initialPersonality);

  const [showAnimation, setShowAnimation] = useState(false);

  const playAnimation = () => {
    setShowAnimation(true);
    setTimeout(() => setShowAnimation(false), 4000);
  };

  const handleResult = async (message: string) => {
    if (state.isLocked) return;

    setState(prev => ({ ...prev, isLocked: true }));

    try {
      const result = await evaluateMessage(
        message,
        state.personality,
        state.affectionTotal
      );

      setState(prev => ({
        ...prev,
        affectionTotal: prev.affectionTotal + result.評価,
        isLocked: false
      }));

      playAnimation();
      return result;
    } catch (error) {
      console.error('Error:', error);
      setState(prev => ({ ...prev, isLocked: false }));
    }
  };

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      <CharacterWindow
        personality={state.personality}
        showAnimation={showAnimation}
      />

      {state.isFreeTextMode ? (
        <div className="p-4 flex gap-2">
          <textarea
            className="flex-1 p-2 border rounded"
            placeholder="自由に入力してください..."
            onChange={(e) => handleFreeText(e.target.value)}
          />
          <button
            className="px-4 py-2 bg-blue-500 text-white rounded"
            onClick={() => handleFreeText}
          >
            送信
          </button>
        </div>
      ) : (
        <OptionsContainer onSelect={handleSelection} />
      )}

      <ResultContainer
        result={state.lastResult}
        affectionTotal={state.affectionTotal}
      />

      <button
        className="w-full p-4 bg-orange-500 text-white hover:bg-orange-600 transition"
        onClick={toggleMode}
      >
        {state.isFreeTextMode ? '選択肢モードに切り替え' : '自由記入モードに切り替え'}
      </button>
    </div>
  );
}

================
File: src/hooks/useCharacterSelect.ts
================
import { useState, useCallback } from "react";
import { PersonalityType, CustomCharacter } from "@/types/character";

export const useCharacterSelect = () => {
    const [showModal, setShowModal] = useState(true);
    const [selectedPersonality, setSelectedPersonality] =
        useState<PersonalityType>("ツンデレ妹");
    const [customCharacter, setCustomCharacter] =
        useState<CustomCharacter | null>(null);

    const handleCharacterSelect = useCallback(
        (personality: PersonalityType, customData?: CustomCharacter) => {
            setSelectedPersonality(personality);
            if (customData) {
                setCustomCharacter(customData);
            }
            setShowModal(false);
        },
        []
    );

    return {
        showModal,
        selectedPersonality,
        customCharacter,
        handleCharacterSelect,
        setShowModal,
    };
};

================
File: src/hooks/useGameState.ts
================
import { useState, useCallback } from "react";
import { GameState, EvaluationResult } from "@/types/game";
import { PersonalityType } from "@/types/character";
import { evaluateMessage } from "@/lib/api";

export const useGameState = (initialPersonality?: PersonalityType) => {
    const [state, setState] = useState<GameState>({
        isLocked: false,
        affectionTotal: 0,
        personality: initialPersonality || "ツンデレ妹",
        isFreeTextMode: false,
        lastResult: null,
    });

    const handleSelection = useCallback(
        async (message: string) => {
            if (state.isLocked) return;

            setState((prev) => ({ ...prev, isLocked: true }));

            try {
                const result = await evaluateMessage(
                    message,
                    state.personality,
                    state.affectionTotal
                );

                setState((prev) => ({
                    ...prev,
                    affectionTotal: prev.affectionTotal + result.評価,
                    lastResult: result,
                    isLocked: false,
                }));

                return result;
            } catch (error) {
                console.error("Error:", error);
                setState((prev) => ({ ...prev, isLocked: false }));
            }
        },
        [state.isLocked, state.personality, state.affectionTotal]
    );

    const handleFreeText = useCallback(
        async (text: string) => {
            if (!text.trim()) return;
            return handleSelection(text);
        },
        [handleSelection]
    );

    const toggleMode = useCallback(() => {
        setState((prev) => ({
            ...prev,
            isFreeTextMode: !prev.isFreeTextMode,
        }));
    }, []);

    return {
        state,
        setState,
        handleSelection,
        handleFreeText,
        toggleMode,
    };
};

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
